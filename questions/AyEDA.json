{
    "questions": [
        {
            "name": "Para identificar la ocurrencia de diferentes situaciones excepcionales en un mismo bloque de código, es necesario:",
            "answers": [
                {
                    "name": "anidar varios bloques try"
                },
                {
                    "name": "Lanzar la sentencia throw con varios parámetros, uno por cada tipo de excepción."
                },
                {
                    "name": "Para cada tipo de excepción, especificar un bloque catch con un parámetro del tipo de excepción a manejar."
                },
                {
                    "name": "Especificar un bloque catch con varios parámetros, uno por cada tipo de excepción."
                }
            ],
            "answerIndex": 2
        },
        {
            "name": "Los parámetros al utilizar una plantilla (template) en el lenguaje C++ pueden ser:",
            "answers": [
                {
                    "name": "Cualquier tipo de dato que se pueda resolver en tiempo de ejecución."
                },
                {
                    "name": "Sólo los tipos básicos del compilador"
                },
                {
                    "name": "Cualquier tipo de dato o expresión entera constante."
                },
                {
                    "name": "Cualquier clase definida por el programador"
                }
            ],
            "answerIndex": 2
        },
        {
            "name": "Las excepciones identificadas en la librería estándar del lenguaje C++ derivan de la clase:",
            "answers": [
                {
                    "name": "exception"
                },
                {
                    "name": "runtime_error"
                },
                {
                    "name": "logic_error"
                },
                {
                    "name": "bad_exception"
                }
            ],
            "answerIndex": 0
        },
        {
            "name": "Para definir que un miembro de la clase es compartido por todas las instancias de la clase, se utiliza la palabra reservada:",
            "answers": [
                {
                    "name": "inline"
                },
                {
                    "name": "friend"
                },
                {
                    "name": "static"
                },
                {
                    "name": "virtual"
                }
            ],
            "answerIndex": 2
        },
        {
            "name": "El código a ejecutar para manejar la ocurrencia de una excepción se encierra en un bloque:",
            "answers": [
                {
                    "name": "try"
                },
                {
                    "name": "catch"
                },
                {
                    "name": "exception"
                },
                {
                    "name": "throw"
                }
            ],
            "answerIndex": 1
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_2.png\">",
            "answers": [
                {
                    "name": "XBC"
                },
                {
                    "name": "ABC"
                },
                {
                    "name": "No se ejecuta. Hay error de compilación"
                },
                {
                    "name": "X"
                }
            ],
            "answerIndex": 0
        },
        {
            "name": "Para definir que un método de la clase puede expandirse como una macro, se utiliza la palabra reservada:",
            "answers": [
                {
                    "name": "inline"
                },
                {
                    "name": "virtual"
                },
                {
                    "name": "static"
                },
                {
                    "name": "friend"
                }
            ],
            "answerIndex": 0
        },
        {
            "name": "La utilización de plantillas (template) de clases en el lenguaje C++ permite:",
            "answers": [
                {
                    "name": "Especificar al compilador la forma de crear una familia parametrizada de clases."
                },
                {
                    "name": "La definición de una familia parametrizada de funciones."
                },
                {
                    "name": "La utilización en el código de la STL (Standard Template Library)"
                },
                {
                    "name": "La declaración de una jerarquía de clases."
                }
            ],
            "answerIndex": 0
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_3.png\">",
            "answers": [
                {
                    "name": "i=3, j=2"
                },
                {
                    "name": "i=3, j=3"
                },
                {
                    "name": "Error de compilación. No se puede asignar valor a una función."
                },
                {
                    "name": "i=1, j=2"
                }
            ],
            "answerIndex": 0
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_4.png\">",
            "answers": [
                {
                    "name": "5"
                },
                {
                    "name": "0"
                },
                {
                    "name": "10"
                },
                {
                    "name": "Ninguno. Error de compilación"
                }
            ],
            "answerIndex": 0
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_5.png\">",
            "answers": [
                {
                    "name": "10"
                },
                {
                    "name": "5"
                },
                {
                    "name": "0"
                },
                {
                    "name": "Ninguno. Error de compilación"
                }
            ],
            "answerIndex": 1
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_6.png\">",
            "answers": [
                {
                    "name": "0"
                },
                {
                    "name": "Ninguno. Error de compilación"
                },
                {
                    "name": "5"
                },
                {
                    "name": "10"
                }
            ],
            "answerIndex": 2
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_7.png\">",
            "answers": [
                {
                    "name": "dummy::dummy(int i, int j): x(i) {y=j;}"
                },
                {
                    "name": "dummy::dummy(int i, int j) {x=i; y=j;}"
                },
                {
                    "name": "Todas son correctas"
                },
                {
                    "name": "dummy::dummy(int i, int j): x(i), y(j) {}"
                }
            ],
            "answerIndex": 2
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_8.png\">",
            "answers": [
                {
                    "name": "template&lt;class T, int N&gt; miVector&lt;T,N&gt;::miVector(int n=N) { v = new T[n];}"
                },
                {
                    "name": "template&lt;class T, int N&gt; mivector::miVector(int n=N) {}"
                },
                {
                    "name": "template&lt;class T, int N&gt; miVector&lt;T,N&gt;::miVector(int n) {}"
                },
                {
                    "name": "template&lt;class T, int N&gt; miVector(int n=N) { v = new T[N];}"
                }
            ],
            "answerIndex": 2
        },

        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_1.png\">",
            "answers": [
                {
                    "name": "10"
                },
                {
                    "name": "Indefinido, Depende del compilador"
                },
                {
                    "name": "1"
                },
                {
                    "name": "Error de compilación"
                }
            ],
            "answerIndex": 2
        },
        {
            "name": "El lenguaje C++ sólo permite la sobrecarga de funciones cuando:",
            "answers": [
                {
                    "name": "Se utiliza el mismo nombre de función y distinto número de parámetro"
                },
                {
                    "name": "Se utiliza el mismo nombre de función y lista de parámetros distinta"
                },
                {
                    "name": "Se utiliza el mismo nombre de función y la misma lista de parámetros pero distinto valor de retorno"
                },
                {
                    "name": "Se utiliza el mismo nombre de función y el mismo número de parámetros con tipos distintos"
                }
            ],
            "answerIndex": 1
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_9.png\">",
            "answers": [
                {
                    "name": "int N = 5; <br> miVector&lt;int,N&gt; v(5);"
                },
                {
                    "name": "int N = 5; <br> miVector&lt;int,5&gt; v(N);"
                },
                {
                    "name": "const int N = 5; <br> miVector&lt;int,N&gt; v;"
                },
                {
                    "name": "int N = 5; <br> miVector&lt;int,N&gt; v(N);"
                }
            ],
            "answerIndex": 1
        },
        {
            "name": "En el lenguaje C++ la ocurrencia de una situación excepcional que requiere un tratamiento especial se invoca con la palabra clave:",
            "answers": [
                {
                    "name": "throw"
                },
                {
                    "name": "try"
                },
                {
                    "name": "exception"
                },
                {
                    "name": "catch"
                }
            ],
            "answerIndex": 2
        },
        {
            "name": "Si se realiza herencia /private/, los miembros /public/ de la clase base:",
            "answers": [
                {
                    "name": "Son /public/ en la clase derivada"
                },
                {
                    "name": "No son accesibles en la clase derivada"
                },
                {
                    "name": "Son /protected/ en la clase derivada"
                },
                {
                    "name": "Son /private /en la clase derivada"
                }
            ],
            "answerIndex": 3
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_10.png\">",
            "answers": [
                {
                    "name": "Error de compilación"
                },
                {
                    "name": "10"
                },
                {
                    "name": "1"
                },
                {
                    "name": "Error en tiempo de ejecución"
                }
            ],
            "answerIndex": 0
        },
        {
            "name": "<img src=\"questions/images/Pregunta_AyEDA_11.png\">",
            "answers": [
                {
                    "name": "Todas son correctas"
                },
                {
                    "name": "dummy *a = new dummy;"
                },
                {
                    "name": "dummy a();"
                },
                {
                    "name": "dummy a;"
                }
            ],
            "answerIndex": 3
        },
        {
            "name": "Al utilizar una plantilla (template), ¿cuándo no es necesario indicar el tipo genérico?",
            "answers": [
                {
                    "name": "Únicamente en las plantillas de clases cuando el compilador pueda deducir el tipo genérico sin ambigüedad."
                },
                {
                    "name": "En las plantillas de funciones cuando el tipo genérico se utilice como parámetro de la función y el compilador pueda deducir el tipo sin ambigüedad."
                },
                {
                    "name": "Siempre hay que especificar el tipo de los parámetro de una plantilla."
                },
                {
                    "name": "Nunca hay que especificar los tipos al utilizar una plantilla."
                }
            ],
            "answerIndex": 2
        },
        {
            "name": "¿Dónde se puede utilizar la clausula /friend /en el lenguaje C++?",
            "answers": [
                {
                    "name": "Funciones y clases."
                },
                {
                    "name": "Sólo funciones."
                },
                {
                    "name": "Sólo clases."
                },
                {
                    "name": "En C con funciones y en C++ con clases."
                }
            ],
            "answerIndex": 2
        },
        {
            "name": "El lenguaje C++ permite especificar el valor por defecto en un parámetro de una función:",
            "answers": [
                {
                    "name": "Todos los parámetros anteriores en la lista también tienen valor por defecto."
                },
                {
                    "name": "Cuando todos los parámetros de la función tienen valor por defecto"
                },
                {
                    "name": "Todos los parámetros siguientes en la lista también tienen valor por defecto."
                },
                {
                    "name": "Cuando todos los parámetros de la función son constantes"
                }
            ],
            "answerIndex": 2
        }
    ]
}
